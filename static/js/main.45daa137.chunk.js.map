{"version":3,"sources":["components/t-kick.js","components/t-sounds.js","components/t-sounds-styles.js","data-model/data-model.js","components/t-sounds-container.js","app.js","serviceWorker.js","index.js"],"names":["TKick","_ref","audioRef","kickKey","url","kickName","onKickTriggered","react_default","a","createElement","className","Button_default","id","concat","variant","style","height","onClick","currentTime","play","ref","element","src","prototypes","PropTypes","string","isRequired","name","func","withStyles","theme","card","width","classes","kicks","Card_default","CardHeader_default","subheader","display","justifyContent","Divider_default","CardContent_default","map","kick","components_t_kick","key","getKicks","TSoundsContainer","state","handleKickTriggered","_this","setState","handleKeyUp","event","el","document","getElementById","toUpperCase","click","addEventListener","this","removeEventListener","t_sounds","Component","App","t_sounds_container","href","Boolean","window","location","hostname","match","ReactDOM","render","src_app","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAKMA,SAAQ,SAAAC,GAAiD,IACzDC,EADWC,EAA8CF,EAA9CE,QAASC,EAAqCH,EAArCG,IAAKC,EAAgCJ,EAAhCI,SAAUC,EAAsBL,EAAtBK,gBAGvC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,GAAE,QAAAC,OAAUV,GACZO,UAAU,WACVI,QAAQ,YACRC,MAAO,CAAEC,OAAQ,QACjBC,QAAS,WACPX,EAAgBD,GAChBH,EAASgB,YAAc,EACvBhB,EAASiB,SAIXZ,EAAAC,EAAAC,cAAA,SACEW,IAAK,SAAAC,GAAO,OAAKnB,EAAWmB,GAC5BX,UAAU,OACVE,GAAIT,EACJmB,IAAKlB,IAIND,MAMTH,EAAMuB,WAAa,CACjBpB,QAASqB,IAAUC,OAAOC,WAC1BC,KAAMH,IAAUC,OAAOC,WACvBtB,IAAKoB,IAAUC,OAAOC,WACtBpB,gBAAiBkB,IAAUI,KAAKF,YAGnB1B,QCWA6B,uBCtDc,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,MAAO,ODoDIH,CA5CC,SAAA5B,GAAmD,IAAhDgC,EAAgDhC,EAAhDgC,QAAS5B,EAAuCJ,EAAvCI,SAAU6B,EAA6BjC,EAA7BiC,MAAO5B,EAAsBL,EAAtBK,gBAC3C,OACEC,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,CAAMI,GAAG,eAAeF,UAAWuB,EAAQF,MACzCxB,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CACE6B,UACE9B,EAAAC,EAAAC,cAAA,OACEM,MAAO,CACLuB,QAAS,OACTC,eAAgB,WAGlBhC,EAAAC,EAAAC,cAAA,QAAMG,GAAG,WAAWP,MAI1BE,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,MACAD,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,KACG0B,EAAMQ,IAAI,SAAAC,GAAI,OACbpC,EAAAC,EAAAC,cAACmC,EAAD,CACEC,IAAKF,EAAKE,IACVxC,SAAUsC,EAAKhB,KACfvB,IAAKuC,EAAKvC,IACVD,QAASwC,EAAKE,IACdvC,gBAAiBA,UEjChBwC,EAAW,iBAAM,CAC5B,CACED,IAAK,IACLlB,KAAM,kBACNvB,IACE,2EAEJ,CACEyC,IAAK,IACLlB,KAAM,aACNvB,IAAK,qEAEP,CACEyC,IAAK,IACLlB,KAAM,YACNvB,IAAK,qEAEP,CACEyC,IAAK,IACLlB,KAAM,OACNvB,IAAK,gEAEP,CACEyC,IAAK,IACLlB,KAAM,MACNvB,IAAK,+DAEP,CACEyC,IAAK,IACLlB,KAAM,YACNvB,IAAK,qEAEP,CACEyC,IAAK,IACLlB,KAAM,cACNvB,IAAK,uEAEP,CACEyC,IAAK,IACLlB,KAAM,YACNvB,IAAK,oEAEP,CACEyC,IAAK,IACLlB,KAAM,aACNvB,IAAK,wECPM2C,6MAjCbC,MAAQ,CACNd,MAAOY,IACPzC,SAAU,MAGZ4C,oBAAsB,SAAA5C,GACpB6C,EAAKC,SAAS,CAAE9C,gBAGlB+C,YAAc,SAAAC,GACZ,IAAMC,EAAKC,SAASC,eAAT,QAAA3C,OAAgCwC,EAAMR,IAAIY,gBACjDH,GAAIA,EAAGI,4FAIXH,SAASI,iBAAiB,WAAYC,KAAKR,4DAI3CG,SAASM,oBAAoB,WAAYD,KAAKR,8CAI9C,OACE7C,EAAAC,EAAAC,cAACqD,EAAD,CACE5B,MAAO0B,KAAKZ,MAAMd,MAClB7B,SAAUuD,KAAKZ,MAAM3C,SACrBC,gBAAiBsD,KAAKX,6BA5BCc,aCehBC,mLAbX,OACEzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwD,EAAD,MACA1D,EAAAC,EAAAC,cAAA,0BACc,IACZF,EAAAC,EAAAC,cAAA,KAAGyD,KAAK,yCAAR,cAFF,2BALUH,aCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASnB,SAASC,eAAe,SD2H3C,kBAAmBmB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.45daa137.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./t-kick.css\";\r\n\r\nconst TKick = ({ kickKey, url, kickName, onKickTriggered }) => {\r\n  let audioRef;\r\n\r\n  return (\r\n    <div className=\"kick\">\r\n      <Button\r\n        id={`kick-${kickKey}`}\r\n        className=\"drum-pad\"\r\n        variant=\"contained\"\r\n        style={{ height: \"100%\" }}\r\n        onClick={() => {\r\n          onKickTriggered(kickName);\r\n          audioRef.currentTime = 0; // https://stackoverflow.com/questions/13002935/html5-audio-start-over\r\n          audioRef.play();\r\n        }}\r\n      >\r\n        {/* Solution inspired by https://codepen.io/StudentOfJS/pen/dzjPwP/ */}\r\n        <audio\r\n          ref={element => (audioRef = element)}\r\n          className=\"clip\"\r\n          id={kickKey}\r\n          src={url}\r\n        >\r\n          {/* <source  type=\"audio/mpeg\" /> */}\r\n        </audio>\r\n        {kickKey}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nTKick.prototypes = {\r\n  kickKey: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired,\r\n  onKickTriggered: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TKick;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { tSoundsStyles } from \"./t-sounds-styles\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TKick from \"./t-kick\";\r\n\r\nconst TSounds = ({ classes, kickName, kicks, onKickTriggered }) => {\r\n  return (\r\n    <Card id=\"drum-machine\" className={classes.card}>\r\n      <CardHeader\r\n        subheader={\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\"\r\n            }}\r\n          >\r\n            <span id=\"display\">{kickName}</span>\r\n          </div>\r\n        }\r\n      />\r\n      <Divider />\r\n      <CardContent>\r\n        {kicks.map(kick => (\r\n          <TKick\r\n            key={kick.key}\r\n            kickName={kick.name}\r\n            url={kick.url}\r\n            kickKey={kick.key}\r\n            onKickTriggered={onKickTriggered}\r\n          />\r\n        ))}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nTSounds.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  kickName: PropTypes.string.isRequired,\r\n  kicks: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      key: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      url: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  onKickTriggered: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withStyles(tSoundsStyles)(TSounds);\r\n","export const tSoundsStyles = theme => ({\r\n  card: {\r\n    width: 290\r\n  }\r\n});\r\n","export const getKicks = () => [\r\n  {\r\n    key: \"Q\",\r\n    name: \"Roundhouse_Kick\",\r\n    url:\r\n      \"http://soundbible.com/mp3/Roundhouse Kick-SoundBible.com-1663225804.mp3\"\r\n  },\r\n  {\r\n    key: \"W\",\r\n    name: \"Sweep_Kick\",\r\n    url: \"http://soundbible.com/mp3/Sweep Kick-SoundBible.com-808409893.mp3\"\r\n  },\r\n  {\r\n    key: \"E\",\r\n    name: \"Spin_Kick\",\r\n    url: \"http://soundbible.com/mp3/Spin Kick-SoundBible.com-1263586030.mp3\"\r\n  },\r\n  {\r\n    key: \"A\",\r\n    name: \"Kick\",\r\n    url: \"http://soundbible.com/mp3/Kick-SoundBible.com-1331196005.mp3\"\r\n  },\r\n  {\r\n    key: \"S\",\r\n    name: \"Jab\",\r\n    url: \"http://soundbible.com/mp3/Jab-SoundBible.com-1806727891.mp3\"\r\n  },\r\n  {\r\n    key: \"D\",\r\n    name: \"Upper_Cut\",\r\n    url: \"http://soundbible.com/mp3/Upper Cut-SoundBible.com-1272257235.mp3\"\r\n  },\r\n  {\r\n    key: \"Z\",\r\n    name: \"Right_Cross\",\r\n    url: \"http://soundbible.com/mp3/Right Cross-SoundBible.com-1721311663.mp3\"\r\n  },\r\n  {\r\n    key: \"X\",\r\n    name: \"Left_Hook\",\r\n    url: \"http://soundbible.com/mp3/Left Hook-SoundBible.com-516660386.mp3\"\r\n  },\r\n  {\r\n    key: \"C\",\r\n    name: \"Right_Hook\",\r\n    url: \"http://soundbible.com/mp3/Right Hook-SoundBible.com-1406389182.mp3\"\r\n  }\r\n];\r\n","import React, { Component } from \"react\";\r\nimport TSounds from \"./t-sounds\";\r\nimport { getKicks } from \"../data-model/data-model\";\r\n\r\nclass TSoundsContainer extends Component {\r\n  state = {\r\n    kicks: getKicks(),\r\n    kickName: \"\"\r\n  };\r\n\r\n  handleKickTriggered = kickName => {\r\n    this.setState({ kickName });\r\n  };\r\n\r\n  handleKeyUp = event => {\r\n    const el = document.getElementById(`kick-${event.key.toUpperCase()}`);\r\n    if (el) el.click();\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keypress\", this.handleKeyUp);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keypress\", this.handleKeyUp);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <TSounds\r\n        kicks={this.state.kicks}\r\n        kickName={this.state.kickName}\r\n        onKickTriggered={this.handleKickTriggered}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TSoundsContainer;\r\n","import React, { Component } from \"react\";\r\nimport \"./app.css\";\r\nimport TSoundsContainer from \"./components/t-sounds-container\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <TSoundsContainer />\r\n        <span>\r\n          Sounds from{\" \"}\r\n          <a href=\"http://soundbible.com/tags-knock.html\">soundbible</a> by Mike\r\n          Koenig\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}